%include <Incl_metop.pm> ; #-*-cperl-*-

%manual
###########################################################################
#
# NAME:
#    SMSBASE/arome2_5/job/ppalgs_arome2_5.sms
#
# FUNCTION:
#    Postprocessing of AROME 2.5 model output - ducting/icing/contrails
#
# RESPONSIBLE:
#    "Martin Lilleeng Sï¿½tra" <martinls>
#
# RESTART:
#    Yes
#
# DESCRIPTION:
#    Postprocessing of AROME 2.5 model output (00,06,12,18 utc)
#    Production of ducting/icing/contrails files.
#
# BUGS:
#
# DISTRIBUTION:
#    No
#
# CALLS:
#    ppalgs
#    fimex
#    start_remote from SMSHOME/start3.pl
#    getfiles from SMSHOME/get3.pl
#
# CONTROL DATA:
#
# INPUT DATA:
#    ~cooper/run/AM25_oper/fcYYYYMMDDHH+0??grib  (??=00-66)     Arome.2.5km #FIXME
#
# OUTPUT DATA:
#    $datadir/arome2_5km_ppalgs??.nc
#    $datadir/arome2_5km_ppalgs??.nc.gz
#    $datadir/arome2_5km_ppalgs_plevels??.nc
#    $datadir/arome2_5km_ppalgs_plevels??.nc.gz
#
# CHANGE LOG:
#    (date:originator.name or userid:sms.name or userid: description)
#    2014-04-17::<martinls>: first version, based on post_hirlam8_ducting.sms by olev
#
##########################################################################
%end
%nopp

# variables and functions

require "$SMSHOME/clean3.pl";
require "$SMSHOME/start3.pl";
require "$SMSHOME/get3.pl";

use POSIX qw(strftime);

sub System {   # print command with date prepended, and execute it
  my $cmd = $_[0];
  chomp(my $date = qx(date));
  print "$date $cmd\n";
  system "$cmd";
}

# get argument: utc (hour) : 00,06,12,18

$arg = $utc;
$utc='xx';

if ( $arg eq "00") { $utc='00'; }
if ( $arg eq "06") { $utc='06'; }
if ( $arg eq "12") { $utc='12'; }
if ( $arg eq "18") { $utc='18'; }

if ( $utc eq 'xx' ) {
    &ERROR("utc input is $arg (ok: 00,06,12,18)\n");
}

chdir $datadir;
chdir $workdir;

@trans = ();
@ppalgs_files = ("arome2_5km_ppalgs${utc}.nc", "arome2_5km_ppalgs${utc}_plevels.nc");

# ppalgs
$file = $ppalgs_files[0];
push(@trans, "$file -mv $datadir/$file");

#FIXME: Implement backup-run

# fimex
$file = $ppalgs_files[1];
push(@trans, "$file -mv $datadir/$file");
  
#FIXME: Implement backup-run

## Generate files remotely unless backup run
##OV $run_remotely = ( "$SMSMODELHOST" ne "$SMSBACKUPMODELHOST" );
$run_remotely = 1;  ## ppalgs can run on byvind (never on bore)

if ( $run_remotely ) {
# Remove old msg files
  $remotedir = "run/ppalgs";
  $cleandir = $remotedir;
  $remote_rm = '*msg';
  &clean_remote();

# Parameters for start_remote
  $rjob = "arome2_5_ppalgs${utc}";
  $remote_job = "atmos/harmonie/job/$rjob.job";

  print "+++ Running $remote_job remotely on $SMSMODELHOST\n";
  $start_file = "arome2_5_ppalgs.start_msg";
  &start_remote($rjob);
#
# Parameters for getfiles
  $start_time = 300;
  $end_file = "arome2_5_ppalgs.end_msg";
  $end_time = 1200;

  $error = &getfiles;
  if ($error) {
    system ("echo 'martinls\@met.no' > $datadir/$TASK'.smsmail'");
    &MAIL_WARNING("Error getting ppalgs files from $SMSMODELHOST");
  }
}

# ----------------------------------------------------------------------
# ppalgs: Ducting gradients, icing indices, and contrails
print "\n";
system "date";
print "ppalgs: Ducting gradients, icing indices, and contrails\n";

for ($i=0; $i<=$#ppalgs_files; $i++) {
  $ppalgsfile = $datadir . '/' . $ppalgs_files[$i];
  
  $time = qx(ncdump -v forecast_reference_time icing_index_test.nc | tail -2 | head -1);
  $time =~ s/[^0-9]//g;
  $forecast_ref_time = strftime("%Y %m %d %H",localtime($time));
  
  ($y4,$m2,$d2,$h2) = (split(' ',$forecast_ref_time))[0,1,2,3];       
  
  if ($run_remotely and $y4 == $yyyy and $m2 == $mm and $d2 == $dd and $h2 == $hh) {
    print "$ppalgsfile was created remotely, no computations here.\n";
    print "WARNING: No backup run implemented!\n"; # Just show how to use it locally
  } else {
    unlink $ppalgsfile;
    print "ERROR: $ppalgsfile not created remotely, and no backup run implemented yet!\n";
#FIXME: Implement backup-run
#    &System( "ppalgs " . " " );
  }
  $ppalgsfiletmp = "${ppalgsfile}.tmp";
  $ppalgsfilegz = "${ppalgsfile}.gz";
  system "gzip -c $ppalgsfile > $ppalgsfiletmp";
  rename $ppalgsfiletmp, $ppalgsfilegz;
}

#==========================================================================
#  End task.
#==========================================================================
&ENDT;
#==========================================================================
#  Clean up and exit
#==========================================================================
&EXIT;

